
class GetAllSongsRepoImpl @Inject constructor(private val context: Context): GetAllSongRepository {
    override suspend fun getAllSongs(): Flow<ResultState<List<Song>>> = flow{
        val songs = mutableListOf<Song>()
        val uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI
        val projection = arrayOf(
            MediaStore.Audio.Media._ID,
            MediaStore.Audio.Media.DATA,
            MediaStore.Audio.Media.SIZE,
            MediaStore.Audio.Media.ALBUM,
            MediaStore.Audio.Media.TITLE,
            MediaStore.Audio.Media.ARTIST,
            MediaStore.Audio.Media.DURATION,
            MediaStore.Audio.Media.YEAR,
            MediaStore.Audio.Media.COMPOSER

        )
        val contentResolver = context.contentResolver
        val selection = "${MediaStore.Audio.Media.IS_MUSIC}!=0"
        emit(ResultState.Loading)
        try {
           val cursor = contentResolver.query(uri,projection,selection,null,null)
            cursor?.use {cursorelement->
                while (cursorelement.moveToNext()){
                    val id = cursorelement.getString(0)
                    val path = cursorelement.getString(1)
                    val size = cursorelement.getString(2)
                    val album = cursorelement.getString(3)
                    val title = cursorelement.getString(4)
                    val artist = cursorelement.getString(5)
                    val duration = cursorelement.getString(6)
                    val year = cursorelement.getString(7)
                    val composer = cursorelement.getString(8)
                    val song = Song(
                        id=id,
                        path = path,
                        size = size,
                        album = album,
                        title = title,
                        artist = artist,
                        duration = duration,
                        year = year,
                        composer = composer
                    )
                    songs.add(song)
                }
            }
            emit(ResultState.Success(data = songs))

        }catch (e: Exception){
            emit(ResultState.Error(message = e.message.toString()))

        }

    }
}
//get all song repo impl

//get all song impl each item look

//Safe
//@Composable
//fun EachSongItemLook(songid: String="",  songTitle: String?="", songArtist: String?="",
//                     songDuration: String?="",
//                     songYear: String?="",
//                     songPath: String?="",
//                     songSize: String?="",
//                     album: String?="Unknown",
//                     composer: String?="Unknown",
//                     albumID: String?=null,
//                     playListViewModel: PlayListViewModel=hiltViewModel(),
//                     mediaManagerViewModel: MediaManagerViewModel=hiltViewModel(),
//                     favSongViewModel: FavSongViewModel=hiltViewModel()) {
//    val context = LocalContext.current
//    val showDialogueBox = rememberSaveable { mutableStateOf(false) }
//    val inserToPlayListState = playListViewModel.insertSongToPlaListState.collectAsState()
//    val insertOrUpdateFavSongState =favSongViewModel.inserOrUpdateFavState.collectAsState()
//    val getAllPlayListSongs =  playListViewModel.getSongFromPlayListState.collectAsState()
//    val favSongsState = favSongViewModel.getAllFavSongState.collectAsState()
//    val  duration = rememberSaveable{ mutableStateOf("0") }
//    LaunchedEffect(getAllPlayListSongs.value.data) {
//        playListViewModel.getSongsFromPlayList()
//        favSongViewModel.getAllFavSong()
//    }
//
//
//    Card (modifier = Modifier.fillMaxWidth().padding(8.dp).clickable{
//        if (songPath.isNullOrEmpty()){
//            FancyToast.makeText(
//                context, "Error Loading Song",
//                FancyToast.LENGTH_SHORT,
//                FancyToast.ERROR, false
//            ).show()
//        }else{
//            mediaManagerViewModel.playMusic(songPath.toUri())
//        }
//
//
//    }, elevation = CardDefaults.elevatedCardElevation(8.dp)
//        , shape = RoundedCornerShape(16.dp)
//    ){
//        Column(modifier = Modifier.padding(8.dp)) {
//
//            Row (modifier = Modifier.padding(5.dp)){
//                val songUri = if(albumID==null){
//                    null
//                }else{
//                    ContentUris.withAppendedId(
//                        Uri.parse("content://media/external/audio/albumart"),
//                        albumID.toLong()
//                    )
//                }
//                if(songUri!=null) {
//                    AsyncImage(
//                        model = songUri,
//                        error = painterResource(R.drawable.noalbumimgasset),
//                        contentDescription = "AlbumArt",
//                        modifier = Modifier
//                            .weight(0.25f),
//                        placeholder = painterResource(R.drawable.lythmlogoasset)
//                    )
//                }else{
//                    Image(
//                        painter = painterResource(R.drawable.noalbumimgasset),
//                        contentDescription = "Logo",
//                        modifier = Modifier.weight(0.25f)
//                    )
//                }
//
//
////                    Image(
////                        painter = painterResource(R.drawable.lythmlogoasset),
////                        contentDescription = "Logo",
////                        modifier = Modifier.weight(0.25f)
////                    )
//                Spacer(modifier = Modifier.width(20.dp))
//                Column(modifier = Modifier.weight(0.75f)) {
//                    Row {
//                        songTitle?.let { Text(it, maxLines = 2) }
//
//                    }
//
//                    Row {
//                        songArtist?.let { Text(it, maxLines = 1) }
//                    }
//                    Row{
//                        songYear?.let { Text("year : $it", maxLines = 1) }
//
//                    }
//                    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Absolute.SpaceEvenly){
//                        songDuration?.let {
//                            duration.value = formatDuration(it.toLong())
//                            Text(duration.value.toString(), maxLines = 1) }
//
//
//                    }
//                    Row(modifier = Modifier, horizontalArrangement = Arrangement.Absolute.SpaceEvenly, verticalAlignment = Alignment.CenterVertically) {
//                        Icon(imageVector = Icons.Filled.Info, contentDescription = "Info",
//                            modifier = Modifier.weight(1f).clickable{
//                                showDialogueBox.value = true
//                            }
//                        )
//                        Icon(imageVector = Icons.Filled.Add, contentDescription = "Add to playlist",
//                            modifier = Modifier.weight(1f).clickable{
//                                val data = getAllPlayListSongs.value.data
//                                //check if exists
//                                val songEntity= SongEntity(
//                                    path = songPath.toString(),
//                                    album = album,
//                                    artist = songArtist,
//                                    composer = composer,
//                                    duration = songDuration,
//                                    size = songSize,
//                                    title = songTitle,
//                                    year = songYear,
//                                    albumId = albumID,
//                                )
//                                val doesExist: Boolean =data.any {
//                                    it.title== songEntity.title
//                                }
//                                Log.d("DOESEXIST", "$doesExist")
//                                if(doesExist){
//                                    FancyToast.makeText(
//                                        context, "Song Already Exists",
//                                        FancyToast.LENGTH_SHORT,
//                                        FancyToast.WARNING, false
//                                    ).show()
//                                }else{
//                                    playListViewModel.insertSongToPlayList(songEntity = songEntity)
//                                }
//                            }
//                        )
//                        Icon(imageVector = Icons.Filled.Favorite, contentDescription = "Favorite",
//                            modifier = Modifier.weight(1f).clickable{
//                                //Fav impl here
//                                val favSongEntity= FavSongEntity(
//                                    path = songPath.toString(),
//                                    album = album,
//                                    artist = songArtist,
//                                    composer = composer,
//                                    duration = songDuration,
//                                    size = songSize,
//                                    title = songTitle,
//                                    year = songYear,
//                                    albumId = albumID,
//                                    lyrics = "Unknown"
//
//                                )
//                                favSongViewModel.insertOrUpdateFavSong(favSongEntity = favSongEntity)
//                                if(!insertOrUpdateFavSongState.value.data.isNullOrEmpty()){
//                                    FancyToast.makeText(
//                                        context, "Saved",
//                                        FancyToast.LENGTH_SHORT,
//                                        FancyToast.SUCCESS, false
//                                    ).show()
//                                }else if(!insertOrUpdateFavSongState.value.error.isNullOrEmpty()){
//                                    FancyToast.makeText(
//                                        context, "Error Saving",
//                                        FancyToast.LENGTH_SHORT,
//                                        FancyToast.ERROR, false
//                                    ).show()
//                                }
//
//
//                            }
//                        )
//                    }
//
//                }
//
//            }
//            if(showDialogueBox.value){
//                AlertDialog(
//                    onDismissRequest = { showDialogueBox.value = false },
//                    title = { Text("Add to playlist") },
//                    confirmButton = {
//                        Button(onClick = {
//                            showDialogueBox.value = false
//                        }) {
//                            Text("Okay")
//                        }
//                    },
//                    dismissButton = {
//                        Button(onClick = {
//                            val songEntity= SongEntity(
//                                path = songPath.toString(),
//                                album = album,
//                                artist = songArtist,
//                                composer = composer,
//                                duration = songDuration,
//                                size = songSize,
//                                title = songTitle,
//                                year = songYear,
//                            )
//                            playListViewModel.insertSongToPlayList(songEntity = songEntity)
//                        }) {
//                            Text("Add to playlist")
//                        }
//                    },
//                    text = {
//                        Column {
//                            LazyColumn {
//                                item {
//                                    Text("All Detail ")
//                                    Text("Album : $album")
//                                    Text("Artist : $songArtist")
//                                    Text("Composer : $composer")
//                                    Text("Duration of :" +
//                                            duration.value.toString())
//                                    Text("Size : $songSize")
//                                    Text("Title : $songTitle")
//                                    Text("Year : $songYear")
//                                    Text("This $songTitle was published in year $songYear by $songArtist and composed by $composer." +
//                                            " It has a duration of ${duration.value} and is $songSize in size.")
//                                }
//                            }
//
//
//                        }
//                    }
//                )
//            }
//
//        }
//    }
//}